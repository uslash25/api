import { Injectable } from '@nestjs/common';
import { McpChatRole } from '@prisma/client';
import { CreateMcpRequestDto } from './dto/create-mcp-request.dto';
import { McpRepository } from './mcp.repository';

@Injectable()
export class McpService {
  constructor(private readonly mcpRepository: McpRepository) {
  }

  async getChats(mcpId: string) {
    return this.mcpRepository.findChatsById(mcpId);
  }

  async sendUserMessage(mcpId: string, message: string) {
    const chat = await this.mcpRepository.sendMessage(mcpId, message, McpChatRole.USER);

    const response = {
      message:     'generated by mcp-core',
      description: 'generated by mcp-core',
    };

    await this.mcpRepository.sendMessage(mcpId, response.message, McpChatRole.ASSISTANT);

    await this.mcpRepository.updateMcpDescription(mcpId, response.description);

    return chat;
  }

  async createMcp(dto: CreateMcpRequestDto, userId: string) {
    const response = {
      id:          dto.id,
      description: 'generated by mcp-core',
      ownerId:     userId,
    };

    const mcp = await this.mcpRepository.createMcp(response);

    await this.sendUserMessage(mcp.id, dto.prompt);

    return mcp;
  }
}
